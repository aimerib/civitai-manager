package views
import (
  	"github.com/gorilla/csrf"
)
templ SettingsIndex() {
    <h2 class="text-2xl font-semibold mb-4">Import Models</h2>
    @SettingsForm()
    <div id="task-progress" class="border border-gray-200 rounded-lg p-6 shadow-lg"></div>

    <script>
        let hasConnected = false;
        htmx.on("htmx:afterSwap", function (evt) {
            if (evt.detail.pathInfo.requestPath === "/settings/run-fetch-job") {
                const taskStatus = document.getElementById("task-status");
                taskStatus.innerHTML = '<div class="text-gray-600">Loading...</div>';
            }
        });

        htmx.on("htmx:afterRequest", function (evt) {
            const taskStatus = document.getElementById("task-status");
            const progressDiv = document.getElementById("task-progress");
            taskStatus.innerHTML = "";

            if (evt.detail.pathInfo.requestPath === "/settings/run-fetch-job" && !hasConnected) {
                hasConnected = true;
                const taskID = JSON.parse(evt.detail.xhr.responseText).taskID;

                // Establish WebSocket connection
                const socket = new WebSocket(`ws://${window.location.host}/ws/${taskID}`);

                socket.onmessage = function (event) {
                    taskStatus.innerHTML = "";
                    const data = JSON.parse(event.data);

                    if (data.status === "in_progress") {
                        // Update progress counter
                        const progressCounter = progressDiv.querySelector('.progress-counter') || document.createElement('div');
                        progressCounter.className = 'progress-counter mb-4 p-4 bg-gray-100 border border-gray-300 rounded-lg text-gray-800';
                        progressCounter.innerHTML = `
                            <div class="flex justify-between items-center">
                                <span class="text-lg font-semibold">Progress:</span>
                                <span class="text-xl font-bold">${data.current} / ${data.total}</span>
                            </div>
                            <div class="mt-2 bg-gray-300 rounded-full h-2.5">
                                <div class="bg-blue-500 h-2.5 rounded-full" style="width: ${(data.current / data.total) * 100}%"></div>
                            </div>
                        `;

                        // Update or create log
                        let logBlock = progressDiv.querySelector('code');
                        if (!logBlock) {
                            logBlock = document.createElement('code');
                            logBlock.style.display = 'block';
                            logBlock.style.whiteSpace = 'pre';
                            logBlock.style.maxHeight = '200px';
                            logBlock.style.overflowY = 'auto';
                            logBlock.className = 'bg-gray-100 text-gray-800 border border-gray-300 rounded-lg p-4 overflow-x-hidden text-sm font-mono';
                            progressDiv.appendChild(logBlock);
                        }

                        // Append new log entry
                        logBlock.textContent += `Importing: ${data.currentModel}\n`;
                        logBlock.scrollTop = logBlock.scrollHeight;

                        // Ensure counter is at the top
                        progressDiv.insertBefore(progressCounter, progressDiv.firstChild);
                    } else if (data.status === "completed") {
                        const completed = document.createElement('div');
                        completed.className = 'text-green-500 font-semibold mt-4';
                        completed.innerText = 'Task completed successfully!';
                        progressDiv.appendChild(completed);
                        socket.close(1000, "Task completed");
                        hasConnected = false;
                    }
                };

                socket.onerror = function (error) {
                    console.error("WebSocket Error:", error);
                    hasConnected = false;
                };

                socket.onclose = function (event) {
                    if (!event.wasClean) {
                        console.error("WebSocket connection closed unexpectedly");
                    }
                    hasConnected = false;
                };
            }
        });
    </script>
}

templ SettingsForm() {
    <div id="task-status" class="mb-8">
        <form
            hx-post="/settings/run-fetch-job"
            hx-trigger="submit"
            hx-target="#task-status"
            hx-headers={ `{"X-CSRF-Token": "` + templ.EscapeString(csrf.Token(ctx)) + `"}` }
            hx-swap="innerHTML"
            class="bg-background-card border border-border rounded-lg p-6 shadow-lg"
        >
            <div class="mb-4">
                <label
                    for="number-to-import"
                    class="block text-sm font-medium text-text-light mb-2"
                >
                    Number of models to import
                </label>
                <input
                    type="number"
                    name="limit"
                    min="1"
                    id="number-to-import"
                    class="w-full px-3 py-2 bg-background-dark text-text-light border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500"
                />
            </div>
            <button
                type="submit"
                class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-2 px-4 rounded-md transition duration-300 ease-in-out transform hover:scale-105"
            >
                Start Task
            </button>
        </form>
    </div>
}
