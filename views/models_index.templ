package views

import (
	"civitai-manager/models"
	"fmt"
)

templ ModelsIndex(models []models.Model) {
	<div class="mx-auto">
		<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
			for _, model := range models {
				<div
					class="bg-background-card cursor-pointer rounded-lg shadow-md overflow-hidden transition-transform duration-300 hover:scale-105"
					hx-get={ fmt.Sprintf("/models/%d", model.ID) }
					hx-target="#content"
					hx-push-url="true"
					hx-swap="innerHTML"
				>
					<div class="relative">
						if len(model.ModelVersions) > 0 && len(model.ModelVersions[0].Images) > 0 {
							<div
								class="media-container"
								data-src={ model.ModelVersions[0].Images[0].URL }
								data-alt={ model.Name }
							>
								<!-- Content will be inserted here by JavaScript -->
							</div>
						}
						if !model.Checked {
							<div class="absolute top-2 right-2 bg-green-500 text-white rounded-full p-1">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="h-4 w-4"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M5 13l4 4L19 7"
									/>
								</svg>
							</div>
						}
					</div>
					<div class="p-4">
						<h2 class="text-lg font-semibold truncate">{ model.Name }</h2>
						if len(model.ModelVersions) > 0 {
							<p class="text-sm text-gray-600">
								Published: { model.ModelVersions[0].PublishedAt.Format("2006-01-02") }
							</p>
						}
					</div>
				</div>
			}
		</div>
	</div>

	@modelGridScript()
}

script modelGridScript() {
	(function() {
		function loadImage(url) {
			return fetch(url)
				.then((response) => response.blob())
				.then((blob) => URL.createObjectURL(blob))
				.catch((error) => console.error("Error loading image:", error));
		}

		function setupMediaContainers() {
			const containers = document.querySelectorAll(".media-container");
			containers.forEach((container) => {
				const url = container.dataset.src;
				const alt = container.dataset.alt;

				loadImage(url).then((objectUrl) => {
					const img = new Image();
					img.onload = function () {
						container.innerHTML = `<img src="${objectUrl}" alt="${alt}" class="w-full h-48 object-cover" style="object-position: left -20px">`;
					};
					img.onerror = function () {
						const video = document.createElement("video");
						video.onloadedmetadata = function () {
							container.innerHTML = `
								<video class="w-full h-48 object-cover" controls style="object-position: left -20px">
									<source src="${url}" type="video/mp4">
									Your browser does not support the video tag.
								</video>
							`;
						};
						video.onerror = function () {
							container.innerHTML = `<p>Unsupported media type</p>`;
						};
						video.src = url;
					};
					img.src = objectUrl;
				});
			});
		}

		if ("serviceWorker" in navigator) {
			window.addEventListener("load", function () {
				navigator.serviceWorker.register('/sw.js').then(
					function (registration) {
						console.log(
							"ServiceWorker registration successful with scope: ",
							registration.scope
						);
					},
					function (err) {
						console.log("ServiceWorker registration failed: ", err);
					}
				);
			});
		}
		setupMediaContainers();
	})();

	// htmx.on("htmx:load", setupMediaContainers);
	// htmx.on("htmx:beforeSwap", cleanupPage);
}
